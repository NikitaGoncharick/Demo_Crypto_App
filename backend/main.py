#üöÄ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ endpoints
from os import access

import uvicorn
from fastapi import FastAPI, Request, HTTPException, Depends, Form
from fastapi.middleware.cors import CORSMiddleware #–†–∞–∑—Ä–µ—à–∞–µ—Ç –±—Ä–∞—É–∑–µ—Ä—É –¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã –∫ –≤–∞—à–µ–º—É API —Å –¥—Ä—É–≥–∏—Ö –¥–æ–º–µ–Ω–æ–≤.
from fastapi.templating import Jinja2Templates #–ü—Ä–µ–≤—Ä–∞—â–∞–µ—Ç HTML-—à–∞–±–ª–æ–Ω—ã –≤ –≥–æ—Ç–æ–≤—ã–µ HTML-—Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –ø–æ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.
from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm # PasswordBearer - –¢—Ä–µ–±—É–µ—Ç JWT —Ç–æ–∫–µ–Ω –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö, PasswordReques - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–∏—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã, –û–∂–∏–¥–∞–µ—Ç –ø–æ–ª—è username –∏ password
from jwt.exceptions import JWTException
from starlette.staticfiles import StaticFiles
from sqlalchemy.orm import Session

import jwt #"—Ü–∏—Ñ—Ä–æ–≤–æ–π –ø—Ä–æ–ø—É—Å–∫"
import requests

from database import get_db, engine
from models import Base, User
from schemas import UserCreate
from crud import UserCRUD
from crypto_service import get_crypto_price
from config import SECRET_KEY, ALGORITHM, ACCESS_TOKEN_EXPIRE_MINUTES
from auth import create_access_token


#--------------
# üöÄ –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ –ë–î
Base.metadata.create_all(bind=engine)
app = FastAPI()

#—Å–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (—Ç–æ–∫–µ–Ω—ã), –∑–∞—â–∏—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–µ endpoints, –≥–¥–µ –≤—ã —è–≤–Ω–æ —É–∫–∞–∂–µ—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç —Ç–æ–∫–µ–Ω–∞.
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")

#—Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –º–µ–∂—Å–∞–π—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

app.mount("/static", StaticFiles(directory="../frontend/css"), name="static") # ‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ (CSS, JS, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è) # .. ‚Äî –∑–Ω–∞—á–∏—Ç ¬´–≤—ã–π—Ç–∏ –Ω–∞ –æ–¥–∏–Ω —É—Ä–æ–≤–µ–Ω—å –≤–≤–µ—Ä—Ö¬ª (–∏–∑ backend –≤ –∫–æ—Ä–µ–Ω—å Demo_Crypto_App)
templates = Jinja2Templates(directory="../frontend/templates") # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤




@app.get("/reg")
async def reg_page(request: Request):
    return templates.TemplateResponse("register.html", {"request": request})


@app.post("/register")
async def register(user: UserCreate, db: Session = Depends(get_db)):
    new_user = UserCRUD.create_user(db, user)

    access_token = create_access_token(data={"sub": user.username}) #sub -—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–ª–µ –≤ JWT —Ç–æ–∫–µ–Ω–µ, –∫–æ—Ç–æ—Ä–æ–µ –æ–∑–Ω–∞—á–∞–µ—Ç "—Å—É–±—ä–µ–∫—Ç" - —Ç–æ–≥–æ, –∫–æ–º—É –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–æ–∫–µ–Ω.

    return {
        "id": new_user.id,
        "username": new_user.username,
        "access_token": access_token,
    }


# @app.post("/login")
# async def login(form_data: OAuth2PasswordRequestForm = Depends(), db: Session = Depends(get_db)):
#     user = UserCRUD.authenticate_user(db, form_data.username, form_data.password)
#     if not user:
#         raise HTTPException(status_code=401, detail="Incorrect username or password")
#     return user
#
#     access_token = create_access_token(data={"sub": user.username})
#     return {"access_token": access_token, "token_type": "bearer"}


@app.post("/login-simple")
async def login_simple(usrname: str = Form(..., description="Username"),
                       password: str = Form(..., description="Password"),
                       db: Session = Depends(get_db)):

    user = UserCRUD.simple_user_authenticate(db, usrname, password)
    if not user:
        raise HTTPException(status_code=401, detail="Incorrect username or password")

    # # –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω
    # access_token = create_access_token(data={"sub": user.username})
    # return {
    #     "access_token": access_token,
    #     "token_type": "bearer"
    # }


@app.get("/crypto/{symbol}")
async def get_crypto_data(symbol: str, db: Session = Depends(get_db)):
    price = get_crypto_price(symbol)
    return {"symbol": symbol, "price": f"{price} USD"}

#------


@app.get("/user/all", response_model=list[UserCreate])
async def get_all_users(db: Session = Depends(get_db)):
    return UserCRUD.get_all_users(db)

@app.get("/user/{user_id}", response_model=UserCreate)
async def get_user(user_id: int, db: Session = Depends(get_db)):
    user = UserCRUD.get_user(db, user_id)
    if not user:
        raise HTTPException(status_code=404, detail="User not found")
    return user

@app.delete("/user/delete/{user_id}")
async def delete_user(user_id: int, db: Session = Depends(get_db)):
    if not user_id:
        raise HTTPException(status_code=400, detail="User ID is required")
    return UserCRUD.delete_user(db, user_id)

#------

#Dependency –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞

# async def get_current_user(token: str = Depends(oauth2_scheme), db: Session = Depends(get_db)):
#     try:
#         payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
#         username: str = payload.get("sub")
#         if username is None:
#             raise HTTPException(status_code=401, detail="Invalid token")
#
#         user = db.query(User).filter(User.username == username).first()
#         if user is None:
#             raise HTTPException(status_code=404, detail="User not found")
#         return user
#
#     except JWTException:
#         raise HTTPException(status_code=401, detail="Invalid token")

# --- –ó–∞—â–∏—â–µ–Ω–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã ----
@app.get("/main")
async def index (request: Request,
                 current_user: User = Depends(get_user)
                 ): # request - –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ HTTP –∑–∞–ø—Ä–æ—Å–µ #Request - –∫–ª–∞—Å—Å –∏–∑ FastAPI, –∫–æ—Ç–æ—Ä—ã–π –æ–ø–∏—Å—ã–≤–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É HTTP –∑–∞–ø—Ä–æ—Å–∞

    return templates.TemplateResponse("base.html", {"request": request}) #–í–µ—Ä–Ω–∏ HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É, –ø–æ–¥—Å—Ç–∞–≤–∏–≤ –≤ —à–∞–±–ª–æ–Ω –¥–∞–Ω–Ω—ã–µ
#--------------

if __name__ == "__main__":
    uvicorn.run(app, host="127.0.0.1", port=8000)