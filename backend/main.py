# FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ endpoints
# –í—Å–µ —á—Ç–æ —Å–≤—è–∑–∞–Ω–æ —Å HTTP (—Ç–æ–∫–µ–Ω—ã, –∫—É–∫–∏, headers) - –≤ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞—Ö.

import uvicorn
from fastapi import FastAPI, Request, HTTPException, Depends, Form, Response #(Response –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è cookie)
from fastapi.responses import RedirectResponse #–ß—Ç–æ–±—ã –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞ –¥—Ä—É–≥—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–º–µ—Å—Ç–æ –≤—ã–±—Ä–æ—Å–∞ –æ—à–∏–±–∫–∏
from fastapi.responses import JSONResponse #"—É–ø–∞–∫–æ–≤–∫–∞" –æ—Ç–≤–µ—Ç–∞ –≤ –ø–æ–Ω—è—Ç–Ω—ã–π –¥–ª—è JavaScript —Ñ–æ—Ä–º–∞—Ç
from fastapi.middleware.cors import CORSMiddleware #–†–∞–∑—Ä–µ—à–∞–µ—Ç –±—Ä–∞—É–∑–µ—Ä—É –¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã –∫ –≤–∞—à–µ–º—É API —Å –¥—Ä—É–≥–∏—Ö –¥–æ–º–µ–Ω–æ–≤.
from fastapi.templating import Jinja2Templates #–ü—Ä–µ–≤—Ä–∞—â–∞–µ—Ç HTML-—à–∞–±–ª–æ–Ω—ã –≤ –≥–æ—Ç–æ–≤—ã–µ HTML-—Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –ø–æ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.
from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm # PasswordBearer - –¢—Ä–µ–±—É–µ—Ç JWT —Ç–æ–∫–µ–Ω –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö, PasswordReques - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–∏—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã, –û–∂–∏–¥–∞–µ—Ç –ø–æ–ª—è username –∏ password
from starlette.staticfiles import StaticFiles
from sqlalchemy.orm import Session

import requests
from jose import jwt, ExpiredSignatureError

from database import get_db, engine
from models import Base, User
from schemas import UserCreate
from crud import UserCRUD, PortfolioCRUD
from crypto_service import get_crypto_price
from config import SECRET_KEY, ALGORITHM, ACCESS_TOKEN_EXPIRE_MINUTES
from auth import create_access_token, decode_token


#--------------
# üöÄ –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ –ë–î
Base.metadata.create_all(bind=engine)
app = FastAPI()

#—Å–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (—Ç–æ–∫–µ–Ω—ã), –∑–∞—â–∏—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–µ endpoints, –≥–¥–µ –≤—ã —è–≤–Ω–æ —É–∫–∞–∂–µ—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç —Ç–æ–∫–µ–Ω–∞.
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")

#—Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –º–µ–∂—Å–∞–π—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

app.mount("/static", StaticFiles(directory="../frontend/css"), name="static") # ‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ (CSS, JS, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è) # .. ‚Äî –∑–Ω–∞—á–∏—Ç ¬´–≤—ã–π—Ç–∏ –Ω–∞ –æ–¥–∏–Ω —É—Ä–æ–≤–µ–Ω—å –≤–≤–µ—Ä—Ö¬ª (–∏–∑ backend –≤ –∫–æ—Ä–µ–Ω—å Demo_Crypto_App)
templates = Jinja2Templates(directory="../frontend/templates") # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤


@app.get("/")
async def root(request: Request):
    return templates.TemplateResponse("login.html", {"request": request})

@app.get("/reg_page")
async def reg_page(request: Request):
    return templates.TemplateResponse("register.html", {"request": request})
@app.post("/register")
async def register(response: Response, username: str = Form(...), password: str = Form(...), email: str = Form(...), db: Session = Depends(get_db)):

    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ Pydantic
    try:
        user_data = UserCreate(username=username, password=password, email=email)
    except ValueError as e:
        return RedirectResponse(url="/reg_page?error=validation_failed", status_code=303)

    new_user = UserCRUD.create_user(db, user_data)

    if not new_user:
        print("User already exists")
        return RedirectResponse(url="/reg_page?error=user_exists", status_code=303)


    access_token = create_access_token(data={"sub": user_data.username}) # –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω | sub "—Å—É–±—ä–µ–∫—Ç" - —Ç–æ–≥–æ, –∫–æ–º—É –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–æ–∫–µ–Ω.
    redirect = RedirectResponse(url="/user-profile", status_code=303)  # 1. –°–æ–∑–¥–∞–µ–º "–ø—É—Å—Ç–æ–π" —Ä–µ–¥–∏—Ä–µ–∫—Ç
    redirect.set_cookie(key="access_token", value=access_token, httponly=True, max_age=ACCESS_TOKEN_EXPIRE_MINUTES * 60) #—Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á –≤ –∫—É–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞

    return redirect


@app.post("/login")
async def login(response: Response, #–¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞ –≤ –±—Ä–∞—É–∑–µ—Ä
                form_data: OAuth2PasswordRequestForm = Depends(), #–≤–Ω—É—Ç—Ä–∏ —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤—Å–µ –ø–æ–ª—è
                db: Session = Depends(get_db)
                ):

    user = UserCRUD.log_in_user(db, form_data.username, form_data.password)
    if not user:
        return RedirectResponse(url="/login_page?error=auth_failed", status_code=303)

    # –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω
    access_token = create_access_token(data={"sub": user.username})

    redirect = RedirectResponse(url="/user-profile", status_code=303) # 1. –°–æ–∑–¥–∞–µ–º "–ø—É—Å—Ç–æ–π" —Ä–µ–¥–∏—Ä–µ–∫—Ç
    redirect.set_cookie(key="access_token", value=access_token, httponly=True, max_age=ACCESS_TOKEN_EXPIRE_MINUTES * 60)  #–ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫—É–∫–∏

    return redirect #–ë—Ä–∞—É–∑–µ—Ä –ø–æ–ª—É—á–∞–µ—Ç –û–î–ò–ù –æ—Ç–≤–µ—Ç —Å –¥–≤—É–º—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏: —Ä–µ–¥–∏—Ä–µ–∫—Ç + –∫—É–∫–∏


#------ Dependency –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞
async def check_auth (request: Request, db: Session = Depends(get_db)) -> User: # request - –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ HTTP –∑–∞–ø—Ä–æ—Å–µ #Request - –∫–ª–∞—Å—Å –∏–∑ FastAPI, –∫–æ—Ç–æ—Ä—ã–π –æ–ø–∏—Å—ã–≤–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É HTTP –∑–∞–ø—Ä–æ—Å–∞
    token = request.cookies.get("access_token") # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –∫—É–∫–∏
    if not token:
        raise HTTPException(status_code=401, detail="Not authenticated")
    try:
        username = decode_token(token) # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
        if username is None:
            raise HTTPException(status_code=401, detail="Invalid token")

        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        user = db.query(User).filter(User.username == username).first()
        if user is None:
            raise HTTPException(status_code=401, detail="User not found")

        return user # ‚Üê –≤–æ–∑–≤—Ä–∞—â–∞–µ–º User –æ–±—ä–µ–∫—Ç

    # –í–ê–ñ–ù–û: –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ –ø–µ—á–∞—Ç–∞–µ–º!
    except ExpiredSignatureError:
        raise HTTPException(status_code=401, detail="Token expired")
#------
@app.get("/crypto/{symbol}")
async def get_crypto_data(symbol: str, db: Session = Depends(get_db)):
    price = get_crypto_price(symbol)
    return {"symbol": symbol, "price": f"{price} USD"}

#------

@app.get("/user/all", response_model=list[UserCreate])
async def get_all_users(db: Session = Depends(get_db)):
    return UserCRUD.get_all_users(db)

@app.get("/user/{user_id}", response_model=UserCreate)
async def get_user(user_id: int, db: Session = Depends(get_db)):
    user = UserCRUD.get_user(db, user_id)
    if not user:
        raise HTTPException(status_code=404, detail="User not found")
    return user

@app.delete("/user/delete/{user_id}")
async def delete_user(user_id: int, db: Session = Depends(get_db)):
    if not user_id:
        raise HTTPException(status_code=400, detail="User ID is required")
    return UserCRUD.delete_user(db, user_id)



# --- –ó–∞—â–∏—â–µ–Ω–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã ----
@app.get("/user-profile")
async def user_profile(request: Request, current_user: User = Depends(check_auth), db: Session = Depends(get_db)):

    if not current_user:
        raise HTTPException(status_code=401, detail="Not authenticated")

    portfolio_data = PortfolioCRUD.get_user_portfolio_data(db, current_user.id)

    return templates.TemplateResponse(
        "user-profile.html", {"request": request,
                              "portfolio": portfolio_data["portfolio"], #–æ–±—ä–µ–∫—Ç –ø–æ—Ä—Ç—Ñ–µ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ç.–∫ –ø—Ä–∏–Ω–∏–º–∞–µ–º return {"portfolio": portfolio,"assets": assets}
                              "assets": portfolio_data["assets"],
                              "user": current_user
                              })

# --- API endpoint –ø—Ä–∏–µ–º–∞ –¥–∞–Ω–Ω—ã—Ö ----
# api/ = –∑–¥–µ—Å—å –∂–∏–≤—É—Ç endpoints –¥–ª—è –¥–∞–Ω–Ω—ã—Ö ( user –Ω–µ —É–≤–∏–¥–∏—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è )
# –û—Ç–¥–µ–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –¥–ª—è –ø—Ä–∏–µ–º–∞ –¥–∞–Ω–Ω—ã—Ö
# –ù–∞—à–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–æ–ª–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∞ –ö–û–ù–ö–†–ï–¢–ù–´–ô –∞–¥—Ä–µ—Å, –∫–æ—Ç–æ—Ä—ã–π –∑–Ω–∞–µ—Ç –∫–∞–∫: –ü—Ä–∏–Ω—è—Ç—å —Å—É–º–º—É –¥–µ–Ω–µ–≥. –û–±–Ω–æ–≤–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö. –í–µ—Ä–Ω—É—Ç—å –æ—Ç–≤–µ—Ç
# –ë–µ–∑ endpoint'–∞ —Ñ–æ—Ä–º–∞ –±—É–¥–µ—Ç –ø—ã—Ç–∞—Ç—å—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É, –∫–æ—Ç–æ—Ä–∞—è –Ω–µ —É–º–µ–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–µ–Ω–µ–≥.

@app.post("/api/add_money")
async def add_money(request:Request, amount: float = Form(...), current_user: User = Depends(check_auth), db: Session = Depends(get_db)):
    try:
        # 1. –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ–Ω—å–≥–∏ –≤ –±–∞–∑–µ
        portfolio_operation = PortfolioCRUD.add_money_to_portfolio(db, current_user.id, amount)

        if portfolio_operation:
            # –ü–†–û–°–¢–û –ü–ï–†–ï–ù–ê–ü–†–ê–í–õ–Ø–ï–ú –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–æ—Ñ–∏–ª—è
            return RedirectResponse(url="/user-profile", status_code=303)
        else:
            return RedirectResponse(url="/user-profile", status_code=303)

    except Exception as e:
        return RedirectResponse(url=f"/user-profile?error={str(e)}", status_code=303)




# ---------- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ ----------
@app.exception_handler(HTTPException)
async def http_exception_handler(request: Request, exc: HTTPException):
    if exc.status_code == 401:
        return RedirectResponse(url="/login_page")
    return RedirectResponse(url="/login_page")  #–µ—Å–ª–∏ –∫–æ–¥ –æ—à–∏–±–∫–∏ –¥—Ä—É–≥–æ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä 404 –∏–ª–∏ 500) ‚Üí
# ----------




if __name__ == "__main__":
    uvicorn.run(app, host="127.0.0.1", port=8000)